# returns true if it has not param, else otherwise
empty = { if {"" equals ("" valueof "$1") } {true} {false} }

# funny side effect but starts from -1 if you don't pass any initial seed
sequence = {
    empty = { if {"" equals ("" valueof "$1") } {true} {false} }
    if {(empty $1)} {seed = (new java.util.concurrent.atomic.AtomicInteger ($seed incrementAndGet) ) } {seed = (new java.util.concurrent.atomic.AtomicInteger $1) } 
    $seed get
}

# pass an initial seed to create a reverse sequence, keep invoking without params for next values
countdown = {
    empty = { if {"" equals ("" valueof "$1") } {true} {false} }
    if {(empty $1)} {seed = (new java.util.concurrent.atomic.AtomicInteger ($seed decrementAndGet) ) } {seed = (new java.util.concurrent.atomic.AtomicInteger $1) } 
    $seed get
}

# probably comppletely useless infinite loop
# ex. while {true} {echo ciao} 
while = {
    recur = {
        if {eval $1} {eval $2 ; recur "$1" "$2"} { } 
    }
    recur "$1" "$2"
}

# there's not native logic negation support, so I had to implement it with if
not = {
    if {eval $1} { false } { true}
}

# invoke the content of a closure n times
# ex. do_n_times 3 {info; echo done}
do_n_times = {
    not = {
        if {eval $1} { false } { true}
    }
    sequence = {
        empty = { if {"" equals ("" valueof "$1") } {true} {false} }
        if {(empty $1)} {seed = (new java.util.concurrent.atomic.AtomicInteger ($seed incrementAndGet) ) } {seed = (new java.util.concurrent.atomic.AtomicInteger $1) } 
        $seed get
    }
    while = {
        recur = {
            if {eval $1} {eval $2 ; recur "$1" "$2"} { } 
        }
        recur "$1" "$2"
    }
    i = (sequence 0 )
    limit = "$1"
    action = "$2"
    while { not  (($i tostring) equals ($limit tostring ) ) }  { echo $i ;  eval $action;  i = (sequence) }
}
